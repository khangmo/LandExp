entity Region {
  name String,
  enabled Boolean
}

entity City {
   name String,
   enabled Boolean
}

entity District {
   name String,
   enabled Boolean
}

entity Street {
   name String,
   postalCode String,
   stateProvince String,
   enabled Boolean
}

entity UserRegion {
   enabled Boolean,
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

enum UserActionType {
   FOR_BUY, FOR_SELL, FOR_RENT, FOR_HIRE
}

enum HouseType {
   FOR_BUY, FOR_SELL, FOR_RENT, FOR_HIRE
}

enum StatusType {
   PENDING, APPROVED, CANCELED, EXPIRED
}

enum TypeOfSell {
   PENDING, APPROVED, CANCELED
}

enum LandType {
   APARTMENT, PENHOUSE, HOME, HOME_VILLA, HOME_STREET_SIDE, LAND_SCAPE, LAND_OF_PROJECT, WAREHOUSES, KIOSKS, OTHER
}

enum DirectionType {
   NORTH, SOUTH, EAST, WEST, EAST_NORTH, WEST_NORTH, EAST_SOUTH, WEST_SOUTH
}

enum AcreageType {
   M2, HECTA
}

entity House {
   address String,
   stateProvince String,
   money Float,
   discount Float,
   direction DirectionType,
   floor String,
   acreage Float,
   acreageType AcreageType,
   bathRoom Integer,
   bedRoom Integer,
   parking Boolean,
   statusType StatusType,
   actionType ActionType,
   landType LandType,
   hits Integer,
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

relationship ManyToOne {
   House{street(name)} to Street,
   House{project(name)} to HouseProjects,
   House{createBy(login)} to User,
   House{updateBy(login)} to User
}
entity HousePhoto {
   fileName String,
   createAt ZonedDateTime
}

enum ActionType {
   USER_SEARCH_BUY, USER_SEARCH_RENT, USER_UPDATE_NEWS, USER_SUBSCRIPTION
}

entity HouseProjects {
   name String
}

enum SocialUtilityType {
   NEAR_SCHOOL, NEAR_MARKET
}

enum HouseUtilityType {
   INTERNET, PARKING, CAB_TV
}

entity SocialUtilities {
   name SocialUtilityType
}

entity HouseUtilities {
   name HouseUtilityType
}

entity Article {
   title String,
   titleAlias String,
   summary String,
   content String,
   statusType StatusType,
   hits Integer,
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

entity Category {
   name String,
   nameAlias String,
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

entity UserProfiles {
   name String,
   phoneNumber String
}

entity UserSubscription {
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

entity UserContractSetting {
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

enum UserActivityType {
   USER_SEARCH_BUY, USER_SEARCH_RENT, USER_CREATE_NEWS, USER_UPDATE_NEWS, USER_SUBSCRIPTION
}

entity UserTracking {
   activityType UserActivityType
}

entity UserActivity {
   sourceId String,
   parentId String,
   activityType UserActivityType,
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

entity UserFeed {
   body String,
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

entity SearchTracking {
   actionType UserActivityType,
   keyword String,
   costFrom Float,
   costTo Float,
   acreageFrom Float,
   acreageTo Float,
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

entity UserFinancial {
   housePrice Float,
   houseAcreage Float,
   loanRate Float,
   loanFromPeople Float,
   customerMoneyHave Float,
   customerMobile String,
   customerEmail String
}

entity Banner {
   title String,
   titleAlias String,
   area Integer,
   hits Integer,
   publicUp ZonedDateTime,
   publicDown ZonedDateTime,
   createAt ZonedDateTime,
   updateAt ZonedDateTime
}

relationship ManyToOne {
   UserFeed{activity} to UserActivity,
   UserSubscription{subscription(actionType)} to UserTracking,
   UserTracking{city(name)} to City,
   UserTracking{district(name)} to District,
   SearchTracking{city(name)} to City,
   SearchTracking{district(name)} to District,
   District{region(name)} to Region,
   District{city(name)} to City,
   Street{district(name)} to District,
   Article{category(name)} to Category,
   Category{parent(name)} to Category,
   Category{createBy(login)} to User,
   Category{updateBy(login)} to User,
   Banner{createBy(login)} to User,
   Banner{updateBy(login)} to User,
   HousePhoto{house(name)} to House,
   HousePhoto{createBy(login)} to User,
   UserProfiles{user(login)} to User,
   Article{createBy(login)} to User,
   Article{updateBy(login)} to User
}

relationship ManyToMany {
   House{houseUtility(name)} to HouseUtilities,
   House{socialUtility(name)} to SocialUtilities,
   UserRegion{user(login)} to User,
   UserRegion{region(name)} to Region
}

// Set pagination options
paginate House, Street, District, City with pagination

dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
